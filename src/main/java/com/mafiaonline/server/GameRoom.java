package com.mafiaonline.server;

import java.util.*;
import java.util.stream.Collectors;

/**
 * GameRoom - qu·∫£n l√Ω ng∆∞·ªùi ch∆°i, role, tr·∫°ng th√°i game v√† giao ti·∫øp v·ªõi PhaseManager.
 * - Ph√¢n role theo s·ªë ng∆∞·ªùi (1/2/3 mafia tu·ª≥ player count)
 * - Wrapper g·ªçi PhaseManager (startDay/openVote/resolveDay/‚Ä¶)
 * - Th√¥ng b√°o ri√™ng cho Mafia bi·∫øt ƒë·ªìng ƒë·ªôi
 * - promptPendingForPhaseForAll() ƒë·ªÉ h·ªèi input theo phase
 * - shutdown() d·ªçn scheduler khi t·∫Øt server
 * - (UI hooks) Broadcast "PLAYERS:", "DEAD:", "PHASE:" ƒë·ªÉ web client b·∫Øt s·ª± ki·ªán
 */
public class GameRoom {

    private final Map<String, Player> players = new LinkedHashMap<>();   // name -> Player
    private final Map<String, PlayerHandler> handlers = new HashMap<>(); // name -> handler
    private final PhaseManager phaseManager;

    private boolean gameStarted = false;
    private GameState state = GameState.LOBBY;

    public GameRoom() {
        this.phaseManager = new PhaseManager(this);
    }

    /* ==================== Player management ==================== */

    public synchronized void addPlayer(String name) {
        if (players.containsKey(name)) {
            System.out.println("[GameRoom] T√™n '" + name + "' ƒë√£ t·ªìn t·∫°i.");
            return;
        }
        Player p = new Player(name);
        players.put(name, p);
        System.out.println("[GameRoom] Player added: " + p);
        // C·∫≠p nh·∫≠t danh s√°ch cho UI (ƒëang ·ªü lobby, alive = true)
        broadcastPlayersAlive();
    }

    public synchronized void addPlayer(String name, PlayerHandler handler) {
        if (players.containsKey(name)) {
            handler.sendMessage("‚ö†Ô∏è T√™n '" + name + "' ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng, vui l√≤ng ƒë·ªïi t√™n v√† k·∫øt n·ªëi l·∫°i.");
            return;
        }
        Player p = new Player(name);
        p.setHandler(handler);
        players.put(name, p);
        handlers.put(name, handler);

        System.out.println("[GameRoom] Player added (with handler): " + p);
        broadcast("üì• Ng∆∞·ªùi ch∆°i " + name + " ƒë√£ tham gia (" + players.size() + " players).");
        broadcastPlayersAlive(); // UI: c·∫≠p nh·∫≠t danh s√°ch ngay
    }

    public synchronized void removePlayer(String name) {
        Player removed = players.remove(name);
        handlers.remove(name);
        if (removed != null) {
            System.out.println("[GameRoom] Player removed: " + removed.getName());
            broadcast("üì§ Ng∆∞·ªùi ch∆°i " + name + " ƒë√£ r·ªùi ph√≤ng.");
            broadcastPlayersAlive(); // UI: c·∫≠p nh·∫≠t danh s√°ch ngay
            checkWinCondition();
        }
    }

    public synchronized Player getPlayer(String name) { return players.get(name); }

    public synchronized Collection<Player> getPlayersAll() {
        return Collections.unmodifiableCollection(players.values());
    }

    public synchronized List<Player> getPlayersAlive() {
        return players.values().stream().filter(Player::isAlive).collect(Collectors.toList());
    }

    public synchronized boolean isGameStarted() { return gameStarted; }

    public synchronized GameState getState() { return state; }

    public PhaseManager getPhaseManager() { return phaseManager; }

    /** Set state + ph√°t "PHASE:" cho UI + prompt pending h√†nh ƒë·ªông theo phase */
    public synchronized void setState(GameState newState) {
        this.state = newState;
        System.out.println("[GameRoom] State -> " + newState);
        broadcastPhase(newState);
        promptPendingForPhaseForAll();
    }

    /* ==================== Start game & assign roles ==================== */

    public synchronized void startGame() {
        if (gameStarted) {
            broadcast("‚ö†Ô∏è Game ƒë√£ b·∫Øt ƒë·∫ßu.");
            return;
        }
        if (players.size() < 3) {
            broadcast("‚ùå C·∫ßn √≠t nh·∫•t 3 ng∆∞·ªùi ƒë·ªÉ b·∫Øt ƒë·∫ßu game (hi·ªán: " + players.size() + ").");
            return;
        }

        gameStarted = true;
        setState(GameState.DAY); // ph√°t "PHASE: DAY" + prompt

        // X√¢y pool role theo s·ªë ng∆∞·ªùi
        List<Role> pool = new ArrayList<>();
        int playerCount = players.size();

        // S·ªë mafia: 1 (<7), 2 (7‚Äì8), 3 (>=9)
        int mafiaCount = (playerCount >= 9) ? 3 : (playerCount >= 7 ? 2 : 1);
        for (int i = 0; i < mafiaCount; i++) pool.add(Role.MAFIA);

        // Th√™m c√°c vai ƒë·∫∑c bi·ªát t·ªëi ƒëa 1 m·ªói lo·∫°i (n·∫øu c√≤n slot)
        if (pool.size() < playerCount) pool.add(Role.DOCTOR);
        if (pool.size() < playerCount) pool.add(Role.DETECTIVE);
        if (pool.size() < playerCount) pool.add(Role.BODYGUARD);
        if (pool.size() < playerCount) pool.add(Role.JESTER);

        // Ph·∫ßn c√≤n l·∫°i l√† d√¢n
        while (pool.size() < playerCount) pool.add(Role.VILLAGER);

        // Tr·ªôn & g√°n
        Collections.shuffle(pool);
        Iterator<Role> it = pool.iterator();

        for (Player p : players.values()) {
            Role r = it.next();
            p.setRole(r);
            p.setAlive(true);
            PlayerHandler h = p.getHandler();
            if (h != null) {
                h.setRole(r);
                h.sendMessage("üé≠ Role c·ªßa b·∫°n: " + r + " ‚Äî " + r.getDescription());
            } else {
                System.out.println("[GameRoom] " + p.getName() + " assigned role " + r);
            }
        }

        // Th√¥ng b√°o ri√™ng cho Mafia bi·∫øt ƒë·ªìng ƒë·ªôi
        List<String> mafiaNames = players.values().stream()
                .filter(pl -> pl.getRole() == Role.MAFIA)
                .map(Player::getName)
                .toList();
        if (!mafiaNames.isEmpty()) {
            String team = String.join(", ", mafiaNames);
            for (String maf : mafiaNames) {
                sendToPlayer(maf, "üïµÔ∏è‚Äç‚ôÇÔ∏è ƒê·ªìng ƒë·ªôi Mafia c·ªßa b·∫°n: " + team);
            }
        }

        broadcast("‚úÖ Tr√≤ ch∆°i ƒë√£ b·∫Øt ƒë·∫ßu! Roles ƒë√£ ƒë∆∞·ª£c ph√¢n ph·ªëi. B·∫Øt ƒë·∫ßu Pha DAY (CHAT).");
        System.out.println("=== Role assignment ===");
        for (Player p : players.values()) System.out.println(" - " + p.getName() + " -> " + p.getRole());

        // UI: ph√°t danh s√°ch alive cho vote
        broadcastPlayersAlive();

        // Ng√†y: CHAT -> VOTE -> RESOLVE do PhaseManager ƒëi·ªÅu ph·ªëi
        phaseManager.startDay();
    }

    /* ==================== Wrappers t·ªõi PhaseManager ==================== */

    public synchronized void startDayPhase() {
        setState(GameState.DAY);
        phaseManager.startDay();
    }

    /** Admin √©p m·ªü giai ƒëo·∫°n vote ngay (b·ªè qua ph·∫ßn CHAT c√≤n l·∫°i) */
    public synchronized void openVotePhase() { phaseManager.openVotePhase(); }

    /** Admin/ch·ªët t·ª± ƒë·ªông: h·∫øt vote ‚Üí x·ª≠ t·ª≠ ‚Üí sang ƒë√™m */
    public synchronized void resolveDayPhase() { phaseManager.resolveDay(); }

    /** Gi·ªØ t∆∞∆°ng th√≠ch c≈©: endDay() => resolveDay() + ki·ªÉm tra th·∫Øng thua */
    public synchronized void endDayPhase() {
        phaseManager.endDay();
        checkWinCondition(); // ki·ªÉm tra sau khi lynch
    }

    public synchronized void castVote(String voter, String target) { phaseManager.castVote(voter, target); }

    public synchronized void startNightPhase() {
        setState(GameState.NIGHT);
        phaseManager.startNight();
    }

    public synchronized void endNightPhase() {
        phaseManager.endNight();
        checkWinCondition(); // ki·ªÉm tra sau khi √°p d·ª•ng kill/save/protect
    }

    public synchronized void recordNightAction(String actor, String target) { phaseManager.recordNightAction(actor, target); }

    /** Cho PlayerHandler ki·ªÉm tra ƒë·ªÉ ‚Äúvote b·∫±ng c√°ch g√µ t√™n‚Äù */
    public synchronized boolean isVotingOpen() {
        return phaseManager != null && phaseManager.isVotingOpen();
    }

    /* ==================== Kill & Win ==================== */

    public synchronized void killPlayer(String name) {
        Player p = players.get(name);
        if (p != null && p.isAlive()) {
            p.kill();
            PlayerHandler h = p.getHandler();
            if (h != null) h.sendMessage("‚ò†Ô∏è B·∫°n ƒë√£ ch·∫øt!");
            broadcast("üíÄ " + name + " ƒë√£ b·ªã lo·∫°i kh·ªèi game.");
            broadcast("DEAD: " + name);           // UI hook: ƒë√°nh d·∫•u ch·∫øt
            broadcastPlayersAlive();              // UI hook: c·∫≠p nh·∫≠t danh s√°ch
            checkWinCondition();
        }
    }

    /**
     * Ki·ªÉm tra th·∫Øng/thua sau m·ªói thay ƒë·ªïi nh√¢n s·ª±.
     * D√¢n th·∫Øng: KH√îNG c√≤n Mafia.
     * Mafia th·∫Øng: Mafia ‚â• ph·∫ßn c√≤n l·∫°i  <=>  2 * mafiaAlive ‚â• totalAlive.
     * (Tr√°nh ph·ª• thu·ªôc li·ªát k√™ vai d√¢n/neutral, tr√°nh sai khi c√≥ UNASSIGNED/JESTER...)
     */
    public synchronized void checkWinCondition() {
        if (!gameStarted) return;

        long mafiaAlive = players.values().stream()
                .filter(p -> p.isAlive() && p.getRole() == Role.MAFIA)
                .count();

        long totalAlive = players.values().stream()
                .filter(Player::isAlive)
                .count();

        if (mafiaAlive == 0) {
            broadcast("üéâ D√ÇN L√ÄNG TH·∫ÆNG! T·∫•t c·∫£ Mafia ƒë√£ b·ªã lo·∫°i.");
            endGame();
            return;
        }

        if (mafiaAlive * 2 >= totalAlive) {
            broadcast("üòà MAFIA TH·∫ÆNG! S·ªë Mafia ƒë√£ ‚â• s·ªë ng∆∞·ªùi c√≤n l·∫°i.");
            endGame();
            return;
        }

        System.out.println("[GameRoom] Game continues. mafiaAlive=" + mafiaAlive + ", totalAlive=" + totalAlive);
    }

    public synchronized void endGame() {
        this.gameStarted = false;
        setState(GameState.END); // ph√°t "PHASE: END" + prompt (client c√≥ th·ªÉ b·ªè qua)

        // L·ªô role khi k·∫øt th√∫c
        String reveal = players.values().stream()
                .map(p -> p.getName() + " ‚Üí " + p.getRole())
                .collect(Collectors.joining(", "));
        broadcast("üèÅ Tr√≤ ch∆°i k·∫øt th√∫c. Vai: " + reveal);

        // Reset v·ªÅ lobby
        for (Player p : players.values()) {
            p.setRole(Role.UNASSIGNED);
            p.setAlive(true);
        }
        broadcastPlayersAlive(); // UI: danh s√°ch quay v·ªÅ alive cho lobby
        setState(GameState.LOBBY);
    }

    /* ==================== Messaging ==================== */

    public synchronized void sendToPlayer(String name, String msg) {
        PlayerHandler h = handlers.get(name);
        if (h != null) h.sendMessage(msg);
    }

    public synchronized void broadcast(String msg) {
        System.out.println("[Broadcast] " + msg);
        for (PlayerHandler h : handlers.values()) h.sendMessage(msg);
    }

    /* ==================== Small helpers ==================== */

    public synchronized boolean isAlive(String name) {
        Player p = players.get(name);
        return p != null && p.isAlive();
    }

    public synchronized int getAliveCount() {
        return (int) players.values().stream().filter(Player::isAlive).count();
    }

    public synchronized void printPlayers() {
        System.out.println("=== Player list ===");
        for (Player p : players.values()) System.out.println(" - " + p);
    }

    /** L·∫•y handler theo t√™n (n·∫øu c·∫ßn d√πng ri√™ng l·∫ª) */
    public synchronized PlayerHandler getHandler(String name) { return handlers.get(name); }

    /** L·∫•y t·∫•t c·∫£ handler (n·∫øu c·∫ßn l·∫∑p) */
    public synchronized Collection<PlayerHandler> getAllHandlers() {
        return Collections.unmodifiableCollection(handlers.values());
    }

    /** G·ªçi prompt pending cho t·∫•t c·∫£ player theo state hi·ªán t·∫°i (v√≠ d·ª• hi·ªÉn th·ªã "B·∫°n mu·ªën vote ai?") */
    public synchronized void promptPendingForPhaseForAll() {
        GameState s = getState();
        for (PlayerHandler h : handlers.values()) {
            h.setPendingForPhase(s);
        }
    }

    /** G·ªçi khi t·∫Øt server ƒë·ªÉ d·ª´ng scheduler an to√†n */
    public synchronized void shutdown() {
        try { phaseManager.shutdownScheduler(); } catch (Exception ignore) {}
    }

    /* ==================== UI hooks ==================== */

    /** Ph√°t "PLAYERS: a, b, c" (alive) ƒë·ªÉ UI x√¢y list + vote */
    private void broadcastPlayersAlive() {
        String csv = players.values().stream()
                .filter(Player::isAlive)
                .map(Player::getName)
                .sorted(String::compareToIgnoreCase)
                .collect(Collectors.joining(", "));
        broadcast("PLAYERS: " + csv);
    }

    /** Ph√°t "PHASE: ..." cho UI */
    private void broadcastPhase(GameState st) {
        String phase;
        switch (st) {
            case DAY -> phase = "DAY";
            case NIGHT -> phase = "NIGHT";
            case LOBBY -> phase = "LOBBY";
            case END -> phase = "END";
            default -> phase = st.name();
        }
        broadcast("PHASE: " + phase);
    }
}
