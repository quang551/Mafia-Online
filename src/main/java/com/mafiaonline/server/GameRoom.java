package com.mafiaonline.server;

import java.util.*;
import java.util.stream.Collectors;

/**
 * GameRoom
 * - Qu·∫£n l√Ω ng∆∞·ªùi ch∆°i, vai, tr·∫°ng th√°i; ph·ªëi h·ª£p v·ªõi PhaseManager
 * - UI hooks: "PHASE: ...", "PLAYERS: ...", "DEAD: name", "RESET_ROLES"
 * - Lu·∫≠t th·∫Øng:
 *      D√¢n th·∫Øng khi kh√¥ng c√≤n Mafia
 *      Mafia th·∫Øng khi MA ‚â• Others  <=>  2*MA ‚â• TotalAlive
 * - An to√†n: lu√¥n g·ªçi checkWinCondition() sau m·ªçi thay ƒë·ªïi nh√¢n s·ª± / chuy·ªÉn pha
 */
public class GameRoom {

    /* ==================== Tr·∫°ng th√°i ==================== */

    private final Map<String, Player> players   = new LinkedHashMap<>(); // name -> Player
    private final Map<String, PlayerHandler> handlers = new HashMap<>(); // name -> handler
    private final PhaseManager phaseManager;

    private boolean gameStarted = false;
    private GameState state = GameState.LOBBY;

    public GameRoom() {
        this.phaseManager = new PhaseManager(this);
    }

    /* ==================== Getters c∆° b·∫£n ==================== */

    public synchronized boolean isGameStarted() { return gameStarted; }
    public synchronized GameState getState()    { return state; }
    public PhaseManager getPhaseManager()       { return phaseManager; }

    public synchronized Player getPlayer(String name) { return players.get(name); }
    public synchronized Collection<Player> getPlayersAll() {
        return Collections.unmodifiableCollection(players.values());
    }
    public synchronized List<Player> getPlayersAlive() {
        return players.values().stream().filter(Player::isAlive).collect(Collectors.toList());
    }

    /* ==================== Qu·∫£n l√Ω ng∆∞·ªùi ch∆°i ==================== */

    public synchronized void addPlayer(String name) {
        if (players.containsKey(name)) {
            System.out.println("[GameRoom] T√™n '" + name + "' ƒë√£ t·ªìn t·∫°i.");
            return;
        }
        Player p = new Player(name);
        players.put(name, p);
        System.out.println("[GameRoom] Player added: " + p);
        broadcastPlayersAlive(); // UI c·∫≠p nh·∫≠t ngay
    }

    public synchronized void addPlayer(String name, PlayerHandler handler) {
        if (players.containsKey(name)) {
            handler.sendMessage("‚ö†Ô∏è T√™n '" + name + "' ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng, vui l√≤ng ƒë·ªïi t√™n v√† k·∫øt n·ªëi l·∫°i.");
            return;
        }
        Player p = new Player(name);
        p.setHandler(handler);
        players.put(name, p);
        handlers.put(name, handler);

        System.out.println("[GameRoom] Player added (with handler): " + p);
        broadcast("üì• Ng∆∞·ªùi ch∆°i " + name + " ƒë√£ tham gia (" + players.size() + " players).");
        broadcastPlayersAlive(); // UI c·∫≠p nh·∫≠t ngay
    }

    public synchronized void removePlayer(String name) {
        Player removed = players.remove(name);
        handlers.remove(name);
        if (removed != null) {
            System.out.println("[GameRoom] Player removed: " + removed.getName());
            broadcast("üì§ Ng∆∞·ªùi ch∆°i " + name + " ƒë√£ r·ªùi ph√≤ng.");
            broadcastPlayersAlive(); // UI
            checkWinCondition();     // quan tr·ªçng n·∫øu t·ªâ l·ªá MA/OTH thay ƒë·ªïi
        }
    }

    /* ==================== Phase & State ==================== */

    /** Set state + ph√°t "PHASE: ..." + prompt pending theo phase. */
    public synchronized void setState(GameState newState) {
        this.state = newState;
        System.out.println("[GameRoom] State -> " + newState);
        broadcastPhase(newState);
        promptPendingForPhaseForAll();
    }

    /* ==================== B·∫Øt ƒë·∫ßu v√°n & chia vai ==================== */

    public synchronized void startGame() {
        if (gameStarted) {
            broadcast("‚ö†Ô∏è Game ƒë√£ b·∫Øt ƒë·∫ßu.");
            return;
        }
        if (players.size() < 3) {
            broadcast("‚ùå C·∫ßn √≠t nh·∫•t 3 ng∆∞·ªùi ƒë·ªÉ b·∫Øt ƒë·∫ßu game (hi·ªán: " + players.size() + ").");
            return;
        }

        // Cho UI qu√™n vai c≈© ƒë·ªÉ tr√°nh leak khi rematch
        broadcast("RESET_ROLES");

        // Reset tr·∫°ng th√°i ng∆∞·ªùi ch∆°i tr∆∞·ªõc khi random
        for (Player p : players.values()) {
            p.setAlive(true);
            p.setRole(Role.UNASSIGNED);
        }
        broadcastPlayersAlive();

        gameStarted = true;
        setState(GameState.DAY); // ph√°t "PHASE: DAY" + prompt

        // X√¢y pool role theo s·ªë ng∆∞·ªùi
        final int playerCount = players.size();
        List<Role> pool = new ArrayList<>(playerCount);

        // S·ªë mafia: 1 (<7), 2 (7‚Äì8), 3 (>=9)
        int mafiaCount = (playerCount >= 9) ? 3 : (playerCount >= 7 ? 2 : 1);
        for (int i = 0; i < mafiaCount; i++) pool.add(Role.MAFIA);

        // Th√™m c√°c vai ƒë·∫∑c bi·ªát t·ªëi ƒëa 1 m·ªói lo·∫°i (n·∫øu c√≤n slot)
        if (pool.size() < playerCount) pool.add(Role.DOCTOR);
        if (pool.size() < playerCount) pool.add(Role.DETECTIVE);
        if (pool.size() < playerCount) pool.add(Role.BODYGUARD);
        if (pool.size() < playerCount) pool.add(Role.JESTER);

        // Ph·∫ßn c√≤n l·∫°i l√† d√¢n
        while (pool.size() < playerCount) pool.add(Role.VILLAGER);

        // Tr·ªôn & g√°n
        Collections.shuffle(pool);
        Iterator<Role> it = pool.iterator();

        for (Player p : players.values()) {
            Role r = it.next();
            p.setRole(r);
            p.setAlive(true);

            PlayerHandler h = p.getHandler();
            if (h != null) {
                h.setRole(r);
                // hai d√≤ng n√†y ƒë·ªÉ client b·∫Øt ƒë∆∞·ª£c role c√° nh√¢n (kh√¥ng l·ªô ng∆∞·ªùi kh√°c)
                h.sendMessage("üé≠ Role c·ªßa b·∫°n: " + r + " ‚Äî " + r.getDescription());
                h.sendMessage("[ROLE_SELF] " + r.name());
            } else {
                System.out.println("[GameRoom] " + p.getName() + " assigned role " + r);
            }
        }

        // Th√¥ng b√°o ri√™ng cho Mafia bi·∫øt ƒë·ªìng ƒë·ªôi
        List<String> mafiaNames = players.values().stream()
                .filter(pl -> pl.getRole() == Role.MAFIA)
                .map(Player::getName)
                .toList();
        if (!mafiaNames.isEmpty()) {
            String team = String.join(", ", mafiaNames);
            for (String maf : mafiaNames) {
                sendToPlayer(maf, "üïµÔ∏è‚Äç‚ôÇÔ∏è ƒê·ªìng ƒë·ªôi Mafia c·ªßa b·∫°n: " + team);
            }
        }

        broadcast("‚úÖ Tr√≤ ch∆°i ƒë√£ b·∫Øt ƒë·∫ßu! Roles ƒë√£ ƒë∆∞·ª£c ph√¢n ph·ªëi. B·∫Øt ƒë·∫ßu Pha DAY (CHAT).");
        System.out.println("=== Role assignment ===");
        for (Player p : players.values()) System.out.println(" - " + p.getName() + " -> " + p.getRole());

        broadcastPlayersAlive();   // UI: danh s√°ch ng∆∞·ªùi s·ªëng ƒë·ªÉ vote
        phaseManager.startDay();   // Ng√†y: CHAT -> VOTE -> RESOLVE (PhaseManager ƒëi·ªÅu ph·ªëi)
    }

    /* ==================== Wrappers t·ªõi PhaseManager ==================== */

    public synchronized void startDayPhase() {
        setState(GameState.DAY);
        phaseManager.startDay();
    }

    public synchronized void openVotePhase() {
        phaseManager.openVotePhase();
    }

    public synchronized void resolveDayPhase() {
        phaseManager.resolveDay();
        checkWinCondition(); // sau lynch/vote n√™n check ngay
    }

    /** T∆∞∆°ng th√≠ch c≈©: k·∫øt th√∫c NG√ÄY. */
    public synchronized void endDayPhase() {
        phaseManager.endDay();
        checkWinCondition();
    }

    public synchronized void castVote(String voter, String target) {
        phaseManager.castVote(voter, target);
    }

    public synchronized void startNightPhase() {
        setState(GameState.NIGHT);
        phaseManager.startNight();
    }

    /** K·∫øt th√∫c ƒê√äM: √°p d·ª•ng kill/save/protect xong th√¨ check win. */
    public synchronized void endNightPhase() {
        phaseManager.endNight();
        checkWinCondition();
    }

    public synchronized void recordNightAction(String actor, String target) {
        phaseManager.recordNightAction(actor, target);
    }

    /** Cho PlayerHandler ki·ªÉm tra ƒë·ªÉ ‚Äúvote b·∫±ng c√°ch g√µ t√™n‚Äù */
    public synchronized boolean isVotingOpen() {
        return phaseManager != null && phaseManager.isVotingOpen();
    }

    /* ==================== Kill & Win ==================== */

    /** Lu√¥n d√πng h√†m n√†y thay v√¨ t·ª± setAlive(false) ·ªü n∆°i kh√°c. */
    public synchronized void killPlayer(String name) {
        Player p = players.get(name);
        if (p != null && p.isAlive()) {
            p.kill();
            PlayerHandler h = p.getHandler();
            if (h != null) h.sendMessage("‚ò†Ô∏è B·∫°n ƒë√£ ch·∫øt!");
            broadcast("üíÄ " + name + " ƒë√£ b·ªã lo·∫°i kh·ªèi game.");
            broadcast("DEAD: " + name);   // UI hook: ƒë√°nh d·∫•u ch·∫øt
            broadcastPlayersAlive();      // UI hook: c·∫≠p nh·∫≠t danh s√°ch
            checkWinCondition();
        }
    }

    /**
     * Ki·ªÉm tra th·∫Øng/thua sau m·ªçi thay ƒë·ªïi nh√¢n s·ª±.
     * - D√¢n th·∫Øng: KH√îNG c√≤n Mafia
     * - Mafia th·∫Øng: Mafia ‚â• ng∆∞·ªùi c√≤n l·∫°i  <=>  2*mafiaAlive ‚â• totalAlive
     */
    public synchronized void checkWinCondition() {
        if (!gameStarted) return;

        long mafiaAlive = players.values().stream()
                .filter(p -> p.isAlive() && p.getRole() == Role.MAFIA)
                .count();

        long totalAlive = players.values().stream()
                .filter(Player::isAlive)
                .count();

        System.out.println("[WinCheck] mafiaAlive=" + mafiaAlive + ", totalAlive=" + totalAlive);

        if (mafiaAlive == 0) {
            broadcast("üéâ D√ÇN L√ÄNG TH·∫ÆNG! T·∫•t c·∫£ Mafia ƒë√£ b·ªã lo·∫°i.");
            endGame();
            return;
        }
        // v√≠ d·ª• c√≤n 2 ng∆∞·ªùi (1 MA + 1 kh√°c): 2*1 >= 2 -> Mafia th·∫Øng
        if (mafiaAlive * 2 >= totalAlive) {
            broadcast("üòà MAFIA TH·∫ÆNG! S·ªë Mafia ƒë√£ ‚â• s·ªë ng∆∞·ªùi c√≤n l·∫°i.");
            endGame();
        }
    }

    /**
     * K·∫øt th√∫c game: d·ª´ng pha, l·ªô role, reset v·ªÅ lobby s·∫°ch (UI: PHASE: END -> LOBBY).
     * N·∫øu PhaseManager c√≥ h√†m resetForNewGameLobby() th√¨ g·ªçi qua reflection (kh√¥ng b·∫Øt bu·ªôc).
     */
    public synchronized void endGame() {
        this.gameStarted = false;

        // D·ª´ng/Reset phase timers n·∫øu PhaseManager c√≥ API n√†y
        try {
            PhaseManager.class.getMethod("resetForNewGameLobby").invoke(phaseManager);
        } catch (Exception ignore) {
            // n·∫øu kh√¥ng c√≥ method, v·∫´n ti·∫øp t·ª•c; ƒë·∫£m b·∫£o timer ƒë√£ cancel ·ªü endDay/endNight/kill
        }

        setState(GameState.END); // ph√°t "PHASE: END"

        // L·ªô role khi k·∫øt th√∫c
        String reveal = players.values().stream()
                .map(p -> p.getName() + " ‚Üí " + p.getRole())
                .collect(Collectors.joining(", "));
        broadcast("üèÅ Tr√≤ ch∆°i k·∫øt th√∫c. Vai: " + reveal);

        // Reset v·ªÅ lobby
        for (Player p : players.values()) {
            p.setRole(Role.UNASSIGNED);
            p.setAlive(true);
        }
        broadcastPlayersAlive(); // UI
        setState(GameState.LOBBY);

        // G·ª£i √Ω rematch
        broadcast("üîÅ V√°n m·ªõi: host g√µ /start ho·∫∑c b·∫•m n√∫t 'B·∫Øt ƒë·∫ßu v√°n m·ªõi'.");
    }

    /* ==================== Messaging ==================== */

    public synchronized void sendToPlayer(String name, String msg) {
        PlayerHandler h = handlers.get(name);
        if (h != null) h.sendMessage(msg);
    }

    public synchronized void broadcast(String msg) {
        System.out.println("[Broadcast] " + msg);
        for (PlayerHandler h : handlers.values()) h.sendMessage(msg);
    }

    /* ==================== Helpers ==================== */

    public synchronized boolean isAlive(String name) {
        Player p = players.get(name);
        return p != null && p.isAlive();
    }

    public synchronized int getAliveCount() {
        return (int) players.values().stream().filter(Player::isAlive).count();
    }

    public synchronized void printPlayers() {
        System.out.println("=== Player list ===");
        for (Player p : players.values()) System.out.println(" - " + p);
    }

    /** L·∫•y handler theo t√™n */
    public synchronized PlayerHandler getHandler(String name) { return handlers.get(name); }

    /** L·∫•y t·∫•t c·∫£ handler */
    public synchronized Collection<PlayerHandler> getAllHandlers() {
        return Collections.unmodifiableCollection(handlers.values());
    }

    /** Prompt pending cho t·∫•t c·∫£ player theo phase hi·ªán t·∫°i */
    public synchronized void promptPendingForPhaseForAll() {
        GameState s = getState();
        for (PlayerHandler h : handlers.values()) {
            h.setPendingForPhase(s);
        }
    }

    /** D·ª´ng scheduler an to√†n khi t·∫Øt server */
    public synchronized void shutdown() {
        try { phaseManager.shutdownScheduler(); } catch (Exception ignore) {}
    }

    /* ==================== UI hooks ==================== */

    /** Ph√°t "PLAYERS: a, b, c" (alive) ƒë·ªÉ UI x√¢y list + vote */
    private void broadcastPlayersAlive() {
        String csv = players.values().stream()
                .filter(Player::isAlive)
                .map(Player::getName)
                .sorted(String::compareToIgnoreCase)
                .collect(Collectors.joining(", "));
        broadcast("PLAYERS: " + csv);
    }

    /** Ph√°t "PHASE: ..." cho UI */
    private void broadcastPhase(GameState st) {
        String phase = switch (st) {
            case DAY   -> "DAY";
            case NIGHT -> "NIGHT";
            case LOBBY -> "LOBBY";
            case END   -> "END";
        };
        broadcast("PHASE: " + phase);
    }
}
